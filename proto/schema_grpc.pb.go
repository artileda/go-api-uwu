// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UwUClient is the client API for UwU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UwUClient interface {
	GetAllArticles(ctx context.Context, in *ArticleParam, opts ...grpc.CallOption) (UwU_GetAllArticlesClient, error)
	GetArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*Article, error)
	CreateArticle(ctx context.Context, in *ArticleInput, opts ...grpc.CallOption) (*Nothing, error)
}

type uwUClient struct {
	cc grpc.ClientConnInterface
}

func NewUwUClient(cc grpc.ClientConnInterface) UwUClient {
	return &uwUClient{cc}
}

func (c *uwUClient) GetAllArticles(ctx context.Context, in *ArticleParam, opts ...grpc.CallOption) (UwU_GetAllArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &UwU_ServiceDesc.Streams[0], "/UwU.UwU/GetAllArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &uwUGetAllArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UwU_GetAllArticlesClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type uwUGetAllArticlesClient struct {
	grpc.ClientStream
}

func (x *uwUGetAllArticlesClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uwUClient) GetArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/UwU.UwU/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uwUClient) CreateArticle(ctx context.Context, in *ArticleInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/UwU.UwU/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UwUServer is the server API for UwU service.
// All implementations must embed UnimplementedUwUServer
// for forward compatibility
type UwUServer interface {
	GetAllArticles(*ArticleParam, UwU_GetAllArticlesServer) error
	GetArticle(context.Context, *ArticleId) (*Article, error)
	CreateArticle(context.Context, *ArticleInput) (*Nothing, error)
	mustEmbedUnimplementedUwUServer()
}

// UnimplementedUwUServer must be embedded to have forward compatible implementations.
type UnimplementedUwUServer struct {
}

func (UnimplementedUwUServer) GetAllArticles(*ArticleParam, UwU_GetAllArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllArticles not implemented")
}
func (UnimplementedUwUServer) GetArticle(context.Context, *ArticleId) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedUwUServer) CreateArticle(context.Context, *ArticleInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedUwUServer) mustEmbedUnimplementedUwUServer() {}

// UnsafeUwUServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UwUServer will
// result in compilation errors.
type UnsafeUwUServer interface {
	mustEmbedUnimplementedUwUServer()
}

func RegisterUwUServer(s grpc.ServiceRegistrar, srv UwUServer) {
	s.RegisterService(&UwU_ServiceDesc, srv)
}

func _UwU_GetAllArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArticleParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UwUServer).GetAllArticles(m, &uwUGetAllArticlesServer{stream})
}

type UwU_GetAllArticlesServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type uwUGetAllArticlesServer struct {
	grpc.ServerStream
}

func (x *uwUGetAllArticlesServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

func _UwU_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UwUServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UwU.UwU/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UwUServer).GetArticle(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UwU_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UwUServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UwU.UwU/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UwUServer).CreateArticle(ctx, req.(*ArticleInput))
	}
	return interceptor(ctx, in, info, handler)
}

// UwU_ServiceDesc is the grpc.ServiceDesc for UwU service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UwU_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UwU.UwU",
	HandlerType: (*UwUServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _UwU_GetArticle_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _UwU_CreateArticle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllArticles",
			Handler:       _UwU_GetAllArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schemas/schema.proto",
}
